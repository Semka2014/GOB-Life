# Используется библиотека NCalc
# Возможно создание функций. Примеры:

# func, sigmoid, 1 / (1 + Exp(-x)), x
# func, srandom, random / 1000

# pasEn; -1 * sigmoid(energy)
# pasEn; -1 * srandom()

# Для всех формул доступны следующие константы
# energy - энергия бота
# predation - чем больше, тем бот менее хищный
# mutation - колличество мутаций
# time - текущий шаг симуляции
# dnal - длина днк бота
# x - положение бота по оси абсцисс
# y - положение бота по оси ординат
# wigth - ширина поля
# height - высота поля
# random - случайное число от 0 до 1000
# oxygen - концентрация кислорода в клетке с ботом (0-1)
# В некоторых формах доступны некоторые дополнительные переменные (с.м. под формулами)

# Вы НЕ можете переименовывать, удалять и создавать новые формулы, если это не отражено в основном коде программы.

# Если вы используете неочевидные подходы для расчёта, к примеру учитываете координаты бота, то рекомендуется это прокомментировать.
#***

# Пассивное изменение энергии и кислорода
pasEn; -1 * (1 + (0.5 - oxygen) / 0.5)
pasOx; -0.001

# Энергия в трупе
deadEn; 10 * (1 + (0.5 - oxygen) / 0.5)

# Изменение кислорода при смерти
deadOx; 0

# Энергия в трупе от суицида
sdeadEn; energy * (1 + (0.5 - oxygen) / 0.5)

# Изменение кислорода при суициде
sdeadOx; 0

# Энергия от фотосинтеза
photoEn; Min(2, 2 * (0.75 - oxygen))  # Фотосинтез невозможен при кислороде > 0.75

# Изменение кислорода при фотосинтезе
photoOx; 0.1

# Энергия в ребёнке
childEn; 5 * (1 + (0.5 - oxygen) / 0.5)

# Изменение энергии и кислорода при бесполом размножении
dupEn; Max(-6 * (1 + (0.5 - oxygen) / 0.5), -6)
dupOx; -0.1

# Изменение энергии и кислорода у обоих родителей при половом размножении
sexP1En; Max(-1 * (1 + (0.5 - oxygen) / 0.5), -1)
sexP1Ox; -0.03

sexP2En; Max(-1 * (1 + (0.5 - oxygen) / 0.5), -1)
sexP2Ox; -0.03
# Дополнительные переменные: energy2 - энергия второго родителя, dnal2 - длина днк второго родителя

# Изменение энергии и кислорода при повороте в одну и в другую стороны
rot1En; Max(0 * (1 + (0.5 - oxygen) / 0.5), 0)
rot1Ox; 0

rot2En; Max(0 * (1 + (0.5 - oxygen) / 0.5), 0)
rot2Ox; 0

# Изменение энергии и кислорода при перемещении
walkEn; Max(0 * (1 + (0.5 - oxygen) / 0.5), 0)
walkOx; 0

# Сколько энергии получать от съедания трупа
fEatEn; fenergy * (1 + (0.5 - oxygen) / 0.5)
# Дополнительные переменные: fenergy - энергия в трупе

# Изменение кислорода при съедании трупа
fEatOx; -0.05
# Дополнительные переменные: fenergy - энергия в трупе

# Атака
# Сколько забирать энергии (если в жертве меньше энергии, то хищник получит всю энергии жертвы)
stealEn; energy2 / 2

# Сколько получать энергии
getstealedEn; stealedEn * (1 + (0.5 - oxygen) / 0.5)
# Дополнительные переменные: stealedEn - количество энергии, которое забрали у жертвы, energy2 - энергия жертвы

# Изменение кислорода при атаке
atcOx; -0.05
# Дополнительные переменные: stealedEn - количество энергии, которое забрали у жертвы, energy2 - энергия жертвы

# Изменение энергии и кислорода при рекомбинации
recombEn; -5 * (dnal / 50) * (genL / 10) * (1 + (0.5 - oxygen) / 0.5)
recombOx; -0.08
# Дополнительные переменные: genL - длина копируемого гена

# Изменение энергии и кислорода при передаче сигнала
trnsmtEn; -3 * (1 + (0.5 - oxygen) / 0.5)
trnsmtOx; 0

# Если для чего-либо будет недостаточно энергии, то действие будет выполнено, но бот будет обречён на смерть в следующем шаге.
